/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from './uploader.component';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from '@angular/core/src/metadata/view';
import * as import9 from '@angular/core/src/linker/component_factory';
import * as import10 from './uploader.component.css.shim';
import * as import11 from '@angular/common/src/directives/ng_if';
import * as import12 from '@angular/core/src/linker/template_ref';
import * as import13 from '@angular/core/src/security';
import * as import14 from '@angular/common/src/directives/ng_class';
import * as import15 from 'ng2-uploader/src/directives/ng-file-drop';
import * as import16 from 'ng2-uploader/src/directives/ng-file-select';
import * as import17 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import18 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import19 from '@angular/core/src/linker/element_ref';
import * as import20 from '@angular/common/src/directives/ng_style';
var renderType_UploaderComponent_Host:import0.RenderComponentType = (null as any);
class _View_UploaderComponent_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _UploaderComponent_0_4:import3.UploaderComponent;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_UploaderComponent_Host0,renderType_UploaderComponent_Host,import6.ViewType.HOST,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.selectOrCreateHostElement('dip-uploader',rootSelector,(null as any));
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_UploaderComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._UploaderComponent_0_4 = new import3.UploaderComponent();
    this._appEl_0.initComponent(this._UploaderComponent_0_4,([] as any[]),compView_0);
    compView_0.create(this._UploaderComponent_0_4,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.UploaderComponent) && (0 === requestNodeIndex))) { return this._UploaderComponent_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (((this.numberOfChecks === 0) && !throwOnChange)) { this._UploaderComponent_0_4.ngOnInit(); }
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_UploaderComponent_Host0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  if ((renderType_UploaderComponent_Host === (null as any))) { (renderType_UploaderComponent_Host = viewUtils.createRenderComponentType('',0,import8.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_UploaderComponent_Host0(viewUtils,parentInjector,declarationEl);
}
export const UploaderComponentNgFactory:import9.ComponentFactory<import3.UploaderComponent> = new import9.ComponentFactory<import3.UploaderComponent>('dip-uploader',viewFactory_UploaderComponent_Host0,import3.UploaderComponent);
const styles_UploaderComponent:any[] = [import10.styles];
var renderType_UploaderComponent:import0.RenderComponentType = (null as any);
class _View_UploaderComponent0 extends import1.AppView<import3.UploaderComponent> {
  _el_0:any;
  _text_1:any;
  _text_2:any;
  _anchor_3:any;
  /*private*/ _appEl_3:import2.AppElement;
  _TemplateRef_3_5:any;
  _NgIf_3_6:import11.NgIf;
  _text_4:any;
  _text_5:any;
  _anchor_6:any;
  /*private*/ _appEl_6:import2.AppElement;
  _TemplateRef_6_5:any;
  _NgIf_6_6:import11.NgIf;
  _text_7:any;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_UploaderComponent0,renderType_UploaderComponent,import6.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','uploader');
    this._text_1 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    this._text_2 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    this._anchor_3 = this.renderer.createTemplateAnchor(this._el_0,(null as any));
    this._appEl_3 = new import2.AppElement(3,0,this,this._anchor_3);
    this._TemplateRef_3_5 = new import12.TemplateRef_(this._appEl_3,viewFactory_UploaderComponent1);
    this._NgIf_3_6 = new import11.NgIf(this._appEl_3.vcRef,this._TemplateRef_3_5);
    this._text_4 = this.renderer.createText(this._el_0,'\n\n    ',(null as any));
    this._text_5 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    this._anchor_6 = this.renderer.createTemplateAnchor(this._el_0,(null as any));
    this._appEl_6 = new import2.AppElement(6,0,this,this._anchor_6);
    this._TemplateRef_6_5 = new import12.TemplateRef_(this._appEl_6,viewFactory_UploaderComponent2);
    this._NgIf_6_6 = new import11.NgIf(this._appEl_6.vcRef,this._TemplateRef_6_5);
    this._text_7 = this.renderer.createText(this._el_0,'\n',(null as any));
    this._expr_0 = import7.UNINITIALIZED;
    this._expr_1 = import7.UNINITIALIZED;
    this._expr_2 = import7.UNINITIALIZED;
    this.init(([] as any[]),[
      this._el_0,
      this._text_1,
      this._text_2,
      this._anchor_3,
      this._text_4,
      this._text_5,
      this._anchor_6,
      this._text_7
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import12.TemplateRef) && (3 === requestNodeIndex))) { return this._TemplateRef_3_5; }
    if (((token === import11.NgIf) && (3 === requestNodeIndex))) { return this._NgIf_3_6; }
    if (((token === import12.TemplateRef) && (6 === requestNodeIndex))) { return this._TemplateRef_6_5; }
    if (((token === import11.NgIf) && (6 === requestNodeIndex))) { return this._NgIf_6_6; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1:boolean = !this.context.inputFile;
    if (import4.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this._NgIf_3_6.ngIf = currVal_1;
      this._expr_1 = currVal_1;
    }
    const currVal_2:any = this.context.inputFile;
    if (import4.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this._NgIf_6_6.ngIf = currVal_2;
      this._expr_2 = currVal_2;
    }
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = this.context.width;
    if (import4.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementStyle(this._el_0,'width',((this.viewUtils.sanitizer.sanitize(import13.SecurityContext.STYLE,currVal_0) == (null as any))? (null as any): (this.viewUtils.sanitizer.sanitize(import13.SecurityContext.STYLE,currVal_0).toString() + 'px')));
      this._expr_0 = currVal_0;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_UploaderComponent0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<import3.UploaderComponent> {
  if ((renderType_UploaderComponent === (null as any))) { (renderType_UploaderComponent = viewUtils.createRenderComponentType('',0,import8.ViewEncapsulation.Emulated,styles_UploaderComponent,{})); }
  return new _View_UploaderComponent0(viewUtils,parentInjector,declarationEl);
}
class _View_UploaderComponent1 extends import1.AppView<any> {
  _el_0:any;
  _NgClass_0_3:import14.NgClass;
  _NgFileDropDirective_0_4:import15.NgFileDropDirective;
  _text_1:any;
  _el_2:any;
  _NgFileSelectDirective_2_3:import16.NgFileSelectDirective;
  _text_3:any;
  /*private*/ _expr_5:any;
  _map_0:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_10:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_UploaderComponent1,renderType_UploaderComponent,import6.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.renderer.createElement((null as any),'label',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','uploader-zone');
    this.renderer.setElementAttribute(this._el_0,'for','uploader');
    this.renderer.setElementAttribute(this._el_0,'ngFileDrop','');
    this._NgClass_0_3 = new import14.NgClass(this.parent.parentInjector.get(import17.IterableDiffers),this.parent.parentInjector.get(import18.KeyValueDiffers),new import19.ElementRef(this._el_0),this.renderer);
    this._NgFileDropDirective_0_4 = new import15.NgFileDropDirective(new import19.ElementRef(this._el_0));
    this._text_1 = this.renderer.createText(this._el_0,'\n        Upload (drag & drop)\n\n        ',(null as any));
    this._el_2 = this.renderer.createElement(this._el_0,'input',(null as any));
    this.renderer.setElementAttribute(this._el_2,'id','uploader');
    this.renderer.setElementAttribute(this._el_2,'ngFileSelect','');
    this.renderer.setElementAttribute(this._el_2,'style','display: none;');
    this.renderer.setElementAttribute(this._el_2,'type','file');
    this._NgFileSelectDirective_2_3 = new import16.NgFileSelectDirective(new import19.ElementRef(this._el_2));
    this._text_3 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    var disposable_0:Function = this.renderer.listen(this._el_0,'onUpload',this.eventHandler(this._handle_onUpload_0_0.bind(this)));
    var disposable_1:Function = this.renderer.listen(this._el_0,'onFileOver',this.eventHandler(this._handle_onFileOver_0_1.bind(this)));
    var disposable_2:Function = this.renderer.listen(this._el_0,'change',this.eventHandler(this._handle_change_0_2.bind(this)));
    var disposable_3:Function = this.renderer.listen(this._el_0,'dragover',this.eventHandler(this._handle_dragover_0_3.bind(this)));
    var disposable_4:Function = this.renderer.listen(this._el_0,'dragleave',this.eventHandler(this._handle_dragleave_0_4.bind(this)));
    this._expr_5 = import7.UNINITIALIZED;
    this._map_0 = import4.pureProxy1((p0:any):{[key: string]:any} => {
      return {'file-over': p0};
    });
    this._expr_6 = import7.UNINITIALIZED;
    this._expr_7 = import7.UNINITIALIZED;
    const subscription_0:any = this._NgFileDropDirective_0_4.onUpload.subscribe(this.eventHandler(this._handle_onUpload_0_0.bind(this)));
    const subscription_1:any = this._NgFileDropDirective_0_4.onFileOver.subscribe(this.eventHandler(this._handle_onFileOver_0_1.bind(this)));
    var disposable_5:Function = this.renderer.listen(this._el_2,'onUpload',this.eventHandler(this._handle_onUpload_2_0.bind(this)));
    var disposable_6:Function = this.renderer.listen(this._el_2,'change',this.eventHandler(this._handle_change_2_1.bind(this)));
    this._expr_10 = import7.UNINITIALIZED;
    const subscription_2:any = this._NgFileSelectDirective_2_3.onUpload.subscribe(this.eventHandler(this._handle_onUpload_2_0.bind(this)));
    this.init(([] as any[]).concat([this._el_0]),[
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3
    ]
    ,[
      disposable_0,
      disposable_1,
      disposable_2,
      disposable_3,
      disposable_4,
      disposable_5,
      disposable_6
    ]
    ,[
      subscription_0,
      subscription_1,
      subscription_2
    ]
    );
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import16.NgFileSelectDirective) && (2 === requestNodeIndex))) { return this._NgFileSelectDirective_2_3; }
    if (((token === import14.NgClass) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) { return this._NgClass_0_3; }
    if (((token === import15.NgFileDropDirective) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) { return this._NgFileDropDirective_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_5:any = 'uploader-zone';
    if (import4.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      this._NgClass_0_3.klass = currVal_5;
      this._expr_5 = currVal_5;
    }
    const currVal_6:any = this._map_0(this.parent.context.hasBaseDropZoneOver);
    if (import4.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      this._NgClass_0_3.ngClass = currVal_6;
      this._expr_6 = currVal_6;
    }
    if (!throwOnChange) { this._NgClass_0_3.ngDoCheck(); }
    const currVal_7:any = this.parent.context.options;
    if (import4.checkBinding(throwOnChange,this._expr_7,currVal_7)) {
      this._NgFileDropDirective_0_4.options = currVal_7;
      this._expr_7 = currVal_7;
    }
    const currVal_10:any = this.parent.context.options;
    if (import4.checkBinding(throwOnChange,this._expr_10,currVal_10)) {
      this._NgFileSelectDirective_2_3.options = currVal_10;
      this._expr_10 = currVal_10;
    }
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
  private _handle_onUpload_0_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.parent.context.handleUpload($event)) !== false);
    return (true && pd_0);
  }
  private _handle_onFileOver_0_1($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.parent.context.fileOverBase($event)) !== false);
    return (true && pd_0);
  }
  private _handle_change_0_2($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._NgFileDropDirective_0_4.onChange()) !== false);
    return (true && pd_0);
  }
  private _handle_dragover_0_3($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._NgFileDropDirective_0_4.onDragOver($event)) !== false);
    return (true && pd_0);
  }
  private _handle_dragleave_0_4($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._NgFileDropDirective_0_4.onDragLeave($event)) !== false);
    return (true && pd_0);
  }
  private _handle_onUpload_2_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.parent.context.handleUpload($event)) !== false);
    return (true && pd_0);
  }
  private _handle_change_2_1($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._NgFileSelectDirective_2_3.onChange()) !== false);
    return (true && pd_0);
  }
}
function viewFactory_UploaderComponent1(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  return new _View_UploaderComponent1(viewUtils,parentInjector,declarationEl);
}
class _View_UploaderComponent2 extends import1.AppView<any> {
  _el_0:any;
  _NgStyle_0_3:import20.NgStyle;
  _text_1:any;
  _el_2:any;
  _text_3:any;
  _map_0:any;
  /*private*/ _expr_0:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_UploaderComponent2,renderType_UploaderComponent,import6.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.renderer.createElement((null as any),'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','with-background');
    this._NgStyle_0_3 = new import20.NgStyle(this.parent.parentInjector.get(import18.KeyValueDiffers),new import19.ElementRef(this._el_0),this.renderer);
    this._text_1 = this.renderer.createText(this._el_0,'\n        ',(null as any));
    this._el_2 = this.renderer.createElement(this._el_0,'div',(null as any));
    this.renderer.setElementAttribute(this._el_2,'class','delete-image');
    this._text_3 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    this._map_0 = import4.pureProxy1((p0:any):{[key: string]:any} => {
      return {'background-image': p0};
    });
    this._expr_0 = import7.UNINITIALIZED;
    var disposable_0:Function = this.renderer.listen(this._el_2,'click',this.eventHandler(this._handle_click_2_0.bind(this)));
    this.init(([] as any[]).concat([this._el_0]),[
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3
    ]
    ,[disposable_0],([] as any[]));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import20.NgStyle) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) { return this._NgStyle_0_3; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0:any = this._map_0((('url(/uploaded/' + this.parent.context.inputFile.filename) + ')'));
    if (import4.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this._NgStyle_0_3.ngStyle = currVal_0;
      this._expr_0 = currVal_0;
    }
    if (!throwOnChange) { this._NgStyle_0_3.ngDoCheck(); }
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
  private _handle_click_2_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.parent.context.deleteImage()) !== false);
    return (true && pd_0);
  }
}
function viewFactory_UploaderComponent2(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  return new _View_UploaderComponent2(viewUtils,parentInjector,declarationEl);
}